{%- comment -%}
  SNIPPET: megamenu.liquid (global settings only)

  Очікує з хедера:
    - link            — LinkDrop кореневого пункту
    - dropdown_index  — 1..N (слот №), мапиться на settings: mm1_*, mm2_*, ...

  Поля в глобальних налаштуваннях (на слот N):
    - mmN_enable (checkbox, опціонально)
    - mmN_product (product, опціонально)
    - mmN_product_heading / mmN_product_small_heading (text, опціонально)
    - mmN_collections (collection_list)  ← ОСЬ ЦЕ ГОЛОВНЕ
    - mmN_categories_heading / mmN_categories_small_heading (text)
    - mmN_show_collection_images або mmN_show_category_images (checkbox, опціонально)
{%- endcomment -%}

{%- liquid
  assign idx = dropdown_index | default: 1

    # Увімкнення слота (не обов’язкове — контент покажемо і без нього, якщо є дані)
  assign slot_enable_key = 'mm' | append: idx | append: '_enable'
  assign slot_enable = settings[slot_enable_key]

    # Продукт (опціонально)
  assign prod_key       = 'mm' | append: idx | append: '_product'
  assign prod_head_key1 = 'mm' | append: idx | append: '_product_heading'
  assign prod_head_key2 = 'mm' | append: idx | append: '_product_small_heading'
  assign prod_raw  = settings[prod_key]
  assign prod_head = settings[prod_head_key1]
  if prod_head == blank
    assign prod_head = settings[prod_head_key2]
  endif

    # КОЛЕКЦІЇ (ГОЛОВНЕ): collection_list
  assign colls_key = 'mm' | append: idx | append: '_collections'
  assign coll_list = settings[colls_key]

    # Заголовок над списком колекцій
  assign cats_head_key1 = 'mm' | append: idx | append: '_categories_heading'
  assign cats_head_key2 = 'mm' | append: idx | append: '_categories_small_heading'
  assign cats_head = settings[cats_head_key1]
  if cats_head == blank
    assign cats_head = settings[cats_head_key2]
  endif

    # Прапорець показу зображень (якщо є)
  assign show_imgs_key1 = 'mm' | append: idx | append: '_show_collection_images'
  assign show_imgs_key2 = 'mm' | append: idx | append: '_show_category_images'
  assign show_imgs = settings[show_imgs_key1]
  if show_imgs == blank
    assign show_imgs = settings[show_imgs_key2]
  endif

    # Ліва колонка: чи є саблінки
  assign has_left = link.links.size > 0

    # Нормалізація продукту (handle або ProductDrop)
  assign p = nil
  if prod_raw != blank
    if prod_raw.handle
      assign p = prod_raw
    else
      assign p = all_products[prod_raw]
    endif
  endif

    # Правильний список колекцій (очікуємо collection_list)
    # Якщо з якоїсь причини прилетять «рядки/хендли» — спробуємо підняти через collections[handle].
  assign normalized_collections = '' | split: ''
  if coll_list and coll_list.size > 0
    for c in coll_list
      assign co = nil
      if c.url
        assign co = c
      elsif c.handle
        assign co = collections[c.handle]
      else
        assign co = collections[c]
      endif
      if co and co.url
        assign normalized_collections = normalized_collections | push: co
      endif
    endfor
  endif

  assign has_colls = normalized_collections.size > 0

    # Показувати слот, якщо увімкнено або є дані
  assign slot_on = false
  if slot_enable == true or p or has_colls
    assign slot_on = true
  endif
-%}

<div
  class="group"
  x-data="megamenu"
  @resize.debounce.window="handleResize"
  @click.outside="closeMegamenu"
  @keydown.escape.window="closeMegamenu"
  @mouseenter="onEnterRoot"
  @mouseleave="onLeaveRoot"
>
  <!-- Кореневий тригер -->
  <button
    type="button"
    @click="toggleMegamenu"
    @mouseenter="onEnterButton"
    @focusin="onEnterButton"
    class="transition-colors duration-300 relative pr-8"
    :aria-expanded="isOpened.toString()"
    aria-haspopup="true"
  >
    <span>{{ link.title }}</span>
    <svg width="12" height="7" viewBox="0 0 12 7" fill="none" xmlns="http://www.w3.org/2000/svg"
         class="absolute top-1/2 -translate-y-[0.2em] right-0 transform transition-transform duration-200"
         :class="{ 'rotate-180': isOpened }">
      <path d="M5.99953 6.20502L0.644531 0.85502L1.35453 0.14502L5.99953 4.79502L10.6445 0.14502L11.3545 0.85502L5.99953 6.20502Z" fill="#474747"/>
    </svg>
  </button>

  <!-- Панель -->
  <div
    class="absolute top-full left-0 w-full min-h-[30vh] overflow-hidden bg-white-bg border-t border-color_1 shadow-lg"
    x-show="isOpened"
    x-cloak
    x-transition:enter="transition ease-out duration-200"
    x-transition:enter-start="opacity-0"
    x-transition:enter-end="opacity-100"
    x-transition:leave="transition ease-in duration-150"
    x-transition:leave-start="opacity-100"
    x-transition:leave-end="opacity-0"
    @mouseenter="onEnterPanel"
    @mouseleave="onLeavePanel"
  >
    <div class="container mx-auto px-4 py-12">
      <div class="grid grid-cols-4 gap-8">

        <!-- 1) Ліва колонка — підменю -->
        <div class="col-span-1 megamenu-list">
          {%- if has_left -%}
            {% comment %}<div class="text-xs uppercase tracking-wide mb-4 opacity-70">{{ link.title }}</div>{% endcomment %}
            <ul class="space-y-3">
              {%- for sub in link.links -%}
                <li>
                  <a href="{{ sub.url }}" class="no-underline">
                    {{ sub.title }}
                  </a>
                </li>
              {%- endfor -%}
            </ul>
          {%- endif -%}
        </div>

        <!-- 2) Центр — продукт (опціонально) -->
        <div class="col-span-2">
          {%- if slot_on and p -%}
            {%- if prod_head != blank -%}
              <div class="text-xs uppercase tracking-wide mb-4 opacity-70">{{ prod_head }}</div>
            {%- endif -%}

            {%- comment -%} фолбек на перший доступний варіант {%- endcomment -%}
            {%- assign _var = p.selected_or_first_available_variant | default: p.first_available_variant -%}
            {%- assign _var_id = _var.id | default: p.variants.first.id -%}

            {%- assign use_simple_hover = settings['mm' | append: idx | append: '_product_simple_hover'] | default: true -%}

            <article
              class="product-card"
              data-hover="{% if use_simple_hover %}simple{% else %}full{% endif %}"
              x-data="productCard({
                variantId: '{{ _var_id }}',
                productUrl: '{{ p.url }}',
                priceCents: {{ p.price | default: 0 }}
              })"
              data-money-format="{{ shop.money_format | escape | strip_newlines }}"
              data-tags="{{ p.tags | join: ' ' | downcase }}"

              style="max-width: 414px;"
            >
              <a class="product-card__link" href="{{ p.url }}" aria-label="{{ p.title | escape }}"></a>

              <div class="product-card__media">
                {%- assign _img = p.featured_media.preview_image | default: p.featured_image -%}
                {%- render 'image',
                  image: _img,
                  class: 'product-card__img',
                  placeholder: 'image',
                  lazyload: true,
                  fetchpriority: 'auto',
                  alt: p.title,
                  decoding: 'async'
                -%}
              </div>

              <div class="product-card__content">
                <h3 class="product-card__title md:text-[18px] text-[16px] font-normal">
                  <a href="{{ p.url }}">{{ p.title }}</a>
                </h3>
                <p class="product-card__price">
                  {%- if p.compare_at_price and p.compare_at_price > p.price -%}
                    <span class="opacity-60 line-through mr-2">{{ p.compare_at_price | money }}</span>
                  {%- endif -%}
                  {{ p.price | money }}
                </p>
              </div>
            </article>
          {%- endif -%}
        </div>

        <!-- 3) Права колонка — СПИСОК КОЛЕКЦІЙ (зображення + назва + лінк) -->
        <div class="col-span-1">
          {%- if slot_on and has_colls -%}
            {%- if cats_head != blank -%}
              <div class="text-xs uppercase tracking-wide mb-4 opacity-70">{{ cats_head }}</div>
            {%- endif -%}
            <div class="space-y-3">
              {%- for c in normalized_collections -%}
                <a href="{{ c.url }}" class="group/item flex items-center gap-3 no-underline">
                  {%- if show_imgs == true or show_imgs == 'true' -%}
                    {%- if c.image or c.featured_image -%}
                      <div class="w-12 h-12 overflow-hidden rounded-xl border border-gray-100">
                        <img
                          src="{{ (c.image | default: c.featured_image) | image_url: width: 160, height: 160, crop: 'center' }}"
                          alt="{{ c.title | escape }}"
                          class="w-full h-full object-cover"
                          loading="lazy">
                      </div>
                    {%- endif -%}
                  {%- endif -%}
                  <span class="text-sm font-medium group-hover/item:underline">{{ c.title }}</span>
                </a>
              {%- endfor -%}
            </div>
          {%- endif -%}
        </div>

      </div>
    </div>
  </div>
</div>

<script>
  document.addEventListener('alpine:init', () => {
    Alpine.data('megamenu', () => ({
      isOpened: false,
      isLoading: false,
      hoverTimer: null,
      isDesktop: window.matchMedia('(hover: hover) and (pointer: fine)').matches || window.innerWidth >= 1024,

      handleResize() {
        this.isDesktop = window.matchMedia('(hover: hover) and (pointer: fine)').matches || window.innerWidth >= 1024;
        if (!this.isDesktop) this.closeMegamenu();
      },

      // Mobile / click
      async toggleMegamenu() {
        if (this.isDesktop) return;
        try {
          this.isLoading = true;
          this.isOpened = !this.isOpened;
          if (this.isOpened) this.openMegamenu(); else this.closeMegamenu();
        } catch (e) { console.error('Error toggling megamenu:', e); }
        finally { this.isLoading = false; }
      },

      // Desktop / hover
      onEnterRoot(){ if (this.isDesktop) this.clearHoverTimer(); },
      onLeaveRoot(){ if (this.isDesktop) this.startHoverCloseTimer(); },
      onEnterButton(){ if (this.isDesktop) { this.clearHoverTimer(); this.openMegamenu(); } },
      onEnterPanel(){ if (this.isDesktop) this.clearHoverTimer(); },
      onLeavePanel(){ if (this.isDesktop) this.startHoverCloseTimer(); },

      startHoverCloseTimer() {
        this.clearHoverTimer();
        this.hoverTimer = setTimeout(() => this.closeMegamenu(), 120);
      },
      clearHoverTimer() {
        if (this.hoverTimer) { clearTimeout(this.hoverTimer); this.hoverTimer = null; }
      },

      openMegamenu() {
        this.isOpened = true;
        if (!this.isDesktop) document.body.classList.add('overflow-hidden');
      },
      closeMegamenu() {
        this.isOpened = false;
        document.body.classList.remove('overflow-hidden');
        this.clearHoverTimer();
      },
    }));
  });
</script>
