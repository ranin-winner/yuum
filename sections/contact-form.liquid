{% render 'entry' with '@/styles/sections/contact-form.scss' %}

<section id="contact-{{ section.id }}"
  class="contact-section palette"
  style="--mt-desktop: {{ section.settings.mt_desktop }}; --mt-mobile: {{ section.settings.mt_mobile }};"
>
  <div class="container">
    
    <header class="contact-section__head text-center md:mb-[40px] mb-[32px]">
      {% if section.settings.title != blank %}
        <h1 class="heading-2 !mb-3">{{ section.settings.title }}</h1>
      {% endif %}
      {% if section.settings.subtitle != blank %}
        <div class="contact-section__subtitle">{{ section.settings.subtitle }}</div>
      {% endif %}
    </header>

    <div class="contact-card">
      {% form 'contact', id: 'ContactForm', class: 'contact-form', novalidate: 'novalidate' %}
        {% if form.posted_successfully? %}
          <p class="contact-form__success" role="status">{{ section.settings.success_text }}</p>
        {% endif %}

        {% if form.errors %}
          <ul class="contact-form__errors" role="alert">
            {% for field in form.errors %}
              <li>{{ form.errors.messages[field] }}</li>
            {% endfor %}
          </ul>
        {% endif %}

        <div class="contact-form__grid grid md:grid-cols-2 md:gap-[24px] gap-[16px]">
          <div class="contact-form__field">
            <label for="ContactForm-name" class="label">{{ section.settings.label_name }}</label>
            <input id="ContactForm-name" type="text" name="contact[name]" autocomplete="name" required>
          </div>

          <div class="contact-form__field">
            <label for="ContactForm-email" class="label">{{ section.settings.label_email }}</label>
            <input id="ContactForm-email" type="email" name="contact[email]" autocomplete="email" required>
          </div>

          {% if section.settings.show_phone %}
          <div class="contact-form__field md:col-span-2">
            <label for="ContactForm-phone" class="label">{{ section.settings.label_phone }}</label>
            <input id="ContactForm-phone" type="tel" name="contact[phone]" inputmode="tel" pattern="[\d\s()+\-]{6,}">
          </div>
          {% endif %}

          <div class="contact-form__field md:col-span-2 has-select">
            <label for="ContactForm-reason" class="label">{{ section.settings.label_reason }}</label>
            <select id="ContactForm-reason" required>
              <option value="" selected disabled>{{ section.settings.reason_placeholder }}</option>
              {% for block in section.blocks %}
                {% if block.type == 'reason' and block.settings.text != blank %}
                  <option value="{{ block.settings.text | escape }}">{{ block.settings.text }}</option>
                {% endif %}
              {% endfor %}
            </select>
          </div>

          <div class="contact-form__field md:col-span-2">
            <label for="ContactForm-message" class="label">{{ section.settings.label_message }}</label>
            <textarea id="ContactForm-message" class="h-full max-h-[84px]" rows="4" maxlength=""></textarea>
            <div class="contact-form__counter">
              <span id="ContactForm-count">0</span><span id="ContactForm-max"></span>
            </div>
          </div>
        </div>

        {%- comment -%}
          Власне поле, яке піде в лист — тільки contact[body].
          Перед сабмітом JS збере Reason + Message у це поле.
        {%- endcomment -%}
        <textarea name="contact[body]" id="ContactForm-body" hidden></textarea>

        <div class="contact-form__actions">
          <button class="btn" type="submit">{{ section.settings.btn_label }}</button>
        </div>
      {% endform %}
    </div>
  </div>

  <script type="module">
    (() => {
      const root = document.getElementById('contact-{{ section.id }}');
      const form = root?.querySelector('#ContactForm');
      if (!form) return;
  
      const nameEl   = form.querySelector('#ContactForm-name');
      const emailEl  = form.querySelector('#ContactForm-email');
      const phoneEl  = form.querySelector('#ContactForm-phone');
      const reasonEl = form.querySelector('#ContactForm-reason');
      const msgEl    = form.querySelector('#ContactForm-message');
      const bodyEl   = form.querySelector('#ContactForm-body');
      const counter  = form.querySelector('#ContactForm-count');
      const maxBox   = form.querySelector('#ContactForm-max');
      const btn      = form.querySelector('button[type="submit"]');
  
      /* --- CHAR LIMIT LOGIC DISABLED ---
      const MAX = Number(msgEl?.dataset.max || msgEl?.getAttribute('maxlength') || 100);
      if (msgEl && !msgEl.hasAttribute('maxlength')) msgEl.setAttribute('maxlength', String(MAX));
      if (maxBox) maxBox.textContent = `/${MAX}`;
      ----------------------------------- */
  
      // показуємо лише лічильник введених символів
      if (maxBox) maxBox.textContent = ""; // приховуємо "/100" якщо був
      const setCounter = () => { if (counter && msgEl) counter.textContent = String(msgEl.value.length); };
      msgEl?.addEventListener('input', setCounter); setCounter();
  
      const emailRe = /^[^\s@]+@[^\s@]+\.[^\s@]{2,}$/i;
  
      // helpers: інлайн-помилки
      const fieldWrap = el => el?.closest('.contact-form__field');
      const clearFieldError = el => {
        const wrap = fieldWrap(el); if (!wrap) return;
        wrap.classList.remove('is-invalid');
        el?.removeAttribute('aria-invalid');
        wrap.querySelector('.field-error')?.remove();
      };
      const showFieldError = (el, message) => {
        const wrap = fieldWrap(el); if (!wrap) return;
        clearFieldError(el);
        el?.setAttribute('aria-invalid','true');
        wrap.classList.add('is-invalid');
        const p = document.createElement('p');
        p.className = 'field-error';
        p.textContent = message;
        wrap.appendChild(p);
      };
  
      // чистимо помилки по вводу
      [nameEl, emailEl, phoneEl, reasonEl, msgEl].forEach(el => {
        el?.addEventListener('input', () => clearFieldError(el));
        el?.addEventListener('change', () => clearFieldError(el));
      });
  
      form.addEventListener('submit', (e) => {
        e.preventDefault(); // контролюємо відправку самі
  
        // зняти попередні помилки
        [nameEl, emailEl, phoneEl, reasonEl, msgEl].forEach(clearFieldError);
  
        const nameVal   = nameEl?.value?.trim() || '';
        const emailVal  = emailEl?.value?.trim() || '';
        const phoneVal  = phoneEl?.value?.trim() || '';
        const reasonVal = reasonEl?.value || '';
        const msgVal    = msgEl?.value || '';
  
        const invalids = [];
  
        if (nameVal.length < 2) {
          showFieldError(nameEl, 'Please enter your name.');
          invalids.push(nameEl);
        }
        if (!emailRe.test(emailVal)) {
          showFieldError(emailEl, 'Please enter a valid email.');
          invalids.push(emailEl);
        }
        if (phoneEl && phoneVal && !/^[\d\s()+\-]{6,}$/.test(phoneVal)) {
          showFieldError(phoneEl, 'Please enter a valid phone number.');
          invalids.push(phoneEl);
        }
        if (!reasonVal) {
          showFieldError(reasonEl, 'Please choose a reason for contacting.');
          invalids.push(reasonEl);
        }
  
        /* --- CHAR LIMIT VALIDATION DISABLED ---
        if (msgVal.length > MAX) {
          showFieldError(msgEl, 'Your message is too long.');
          invalids.push(msgEl);
        }
        ---------------------------------------- */
  
        if (invalids.length) {
          invalids[0]?.scrollIntoView({ behavior: 'smooth', block: 'center' });
          return; // не відправляємо
        }
  
        // все ок — формуємо contact[body] і відправляємо
        const parts = [];
        if (reasonVal) parts.push(`Reason: ${reasonVal}`);
        if (msgVal.trim()) parts.push(`Message:\n${msgVal.trim()}`);
        bodyEl.value = parts.join('\n\n');
  
        btn?.setAttribute('disabled','disabled');
        try { form.submit(); } finally {
          setTimeout(() => btn?.removeAttribute('disabled'), 2000);
        }
      });
    })();
  </script>
  
  
</section>

{% schema %}
{
  "name": "Contact form (native)",
  "settings": [
    { "type": "text", "id": "title", "label": "Title", "default": "Send us a message" },
    { "type": "richtext", "id": "subtitle", "label": "Subtitle", "default": "<p>We are always here to help. Please fill out the contact form below and we will get back to you as soon as possible. We normally respond within 1 to 2 working days.</p>" },

    { "type": "text", "id": "mt_desktop", "label": "Margin-top (desktop)", "default": "80px" },
    { "type": "text", "id": "mt_mobile", "label": "Margin-top (mobile)", "default": "40px" },

    { "type": "checkbox", "id": "show_phone", "label": "Show phone field", "default": false },

    { "type": "text", "id": "label_name", "label": "Label: Name", "default": "Your Name*" },
    { "type": "text", "id": "label_email", "label": "Label: Email", "default": "Email*" },
    { "type": "text", "id": "label_phone", "label": "Label: Phone", "default": "Phone (optional)" },
    { "type": "text", "id": "label_reason", "label": "Label: Reason", "default": "Reason for contacting*" },
    { "type": "text", "id": "reason_placeholder", "label": "Reason placeholder", "default": "Choose a reason" },
    { "type": "text", "id": "label_message", "label": "Label: Message", "default": "Message (optional)" },
    

    { "type": "text", "id": "btn_label", "label": "Button label", "default": "Send enquiry" },
    { "type": "text", "id": "success_text", "label": "Success message", "default": "Thanks! Your message has been sent." }
  ],
  "blocks": [
    {
      "type": "reason",
      "name": "Reason option",
      "settings": [
        { "type": "text", "id": "text", "label": "Option text", "default": "General inquiry" }
      ]
    }
  ],
  "max_blocks": 10,
  "presets": [
    { "name": "Contact form (native)" }
  ]
}
{% endschema %}
