{%- comment -%}
Inputs:
  product: Product
Notes:
  — логіка вибору варіанта та addToCart інкапсульована тут
  — стилі винесені у SCSS (див. product-card.scss)
{%- endcomment -%}

{%- assign p = product | default: item -%}
{%- if p == blank -%}{% break %}{%- endif -%}

<article
  class="product-card"
  x-data="productCard({
    variantId: '{{ p.first_available_variant.id }}',
    productUrl: '{{ p.url }}',
    priceCents: {{ p.price }}
  })"
  data-money-format="{{ shop.money_format | escape | strip_newlines }}"
>
  <!-- вся картка клікабельна -->
  <a class="product-card__link" href="{{ p.url }}" aria-label="{{ p.title | escape }}"></a>

  <div class="product-card__media">
    <div class="product-card__badge-and-btn absolute top-0 left-0 w-full
    flex justify-between p-[16px]">
        <div class="badges">
            {% render 'product-badges', product: product, location: 'pdp' %}
        </div>
        <div>
            <button type="button" class="md:hidden" aria-label="Add to wishlist" data-action="wish">
                <svg viewBox="0 0 24 24" class="pcd__wish-ic" fill="none" stroke="currentColor" stroke-width="1.6">
                <path d="M20.84 4.61a5.5 5.5 0 0 0-7.78 0L12 5.67l-1.06-1.06a5.5 5.5 0 0 0-7.78 7.78L12 21.23l8.84-8.84a5.5 5.5 0 0 0 0-7.78z"></path>
                </svg>
          </button>
        </div>
    </div>

    {%- assign _img = p.featured_media.preview_image | default: p.featured_image -%}
    {%- render 'image',
      image: _img,
      class: 'product-card__img',
      placeholder: 'image',
      lazyload: true,
      fetchpriority: 'auto',
      alt: p.title,
      decoding: 'async'
    -%}
  </div>

  <div class="product-card__content">
    <h3 class="product-card__title md:text-[18px] text-[16px] font-normal"><a href="{{ p.url }}">{{ p.title }}</a></h3>
    <p class="product-card__price">{{ p.price | money }}</p>
  </div>

  <!-- CTA у картці (відображається й на мобайлі) -->
  <div class="product-card__cta md:hidden text-center">
    <button class="product-card__btn btnw-full relative z-10"
            @click.prevent.stop="addToCart">
      <span x-text="ADD TO CART">ADD TO CART</span>
    </button>
    <button class="product-card__read btn btn-outline w-full mt-3 relative z-10"
            @click.prevent.stop="openSheet($refs.details)">
      READ MORE
    </button>
  </div>

  <!-- DESKTOP OVERLAY (hover) -->
  <div class="product-card__hover" @click.stop="handleAction($event)">
    <div class="pcd" x-ref="details">
      <header class="pcd__header">
        <h4 class="pcd__title">{{ p.title }}</h4>
      </header>

      {%- assign short = p.metafields.custom.short_description -%}
      {%- if short != blank -%}
        <p class="pcd__short">{{ short | metafield_text }}</p>
      {%- endif -%}

      {% comment %} <div class="pcd__divider" role="separator"></div> {% endcomment %}

      {%- assign details = p.metafields.custom.product_detais_short -%}
      {%- if details != blank -%}
        <div class="pcd__details">
          {{ details | metafield_tag }}
        </div>
      {%- endif -%}

      {% comment %} <div class="pcd__divider" role="separator"></div> {% endcomment %}

      <div class="pcd__controls">
        <div class="pcd__qty">
          <span class="pcd__qty-label">Quantity</span>
          <div class="pcd__qty-box">
            <button type="button" class="pcd__qty-btn" data-action="dec">−</button>
            <span class="pcd__qty-val" x-text="qty">1</span>
            <button type="button" class="pcd__qty-btn" data-action="inc">+</button>
          </div>
        </div>

        <div class="pcd__actions">
          <button class="pcd__add btn" data-action="add">
            <span x-text="totalPrice + ' - ADD TO CART'">{{ p.price | money }} · ADD TO CART</span>
          </button>
        </div>

        <div class="pcd__read">
          <a class="pcd__read-link pcd__read-link--mob underline underline-offset-[4px] font-medium text-[12px] leading-[16px] tracking-[3px] text-center align-middle uppercase" href="{{ p.url }}">READ MORE</a>
        </div>
      </div>
    </div>
  </div>
</article>

<script>
document.addEventListener('alpine:init', () => {
  Alpine.data('productCard', ({ variantId, productUrl, priceCents }) => ({
    // ---- state ----
    variantId,
    productUrl,
    priceCents,
    qty: 1,
    wish: false,

    // ---- actions ----
    inc(){ this.qty++ },
    dec(){ if (this.qty > 1) this.qty-- },
    addToCart(){
      Alpine.store('cart')?.addToCart({ variantId: this.variantId, quantity: this.qty })
    },
    toggleWish(){ this.wish = !this.wish },

    // ---- computed ----
    get totalPrice(){
      const cents = this.qty * this.priceCents
      if (window.Shopify && typeof Shopify.formatMoney === 'function') {
        return Shopify.formatMoney(cents)
      }
      return '£' + (cents / 100).toFixed(2)
    },

    // ---- desktop overlay delegated handler ----
    handleAction(e){
      const btn = e.target.closest('[data-action]')
      if(!btn) return
      const action = btn.dataset.action
      if(action==='inc'){ this.inc() }
      if(action==='dec'){ this.dec() }
      if(action==='add'){ this.addToCart() }
      if(action==='wish'){ this.toggleWish() }
      if(action==='sheet'){ this.openSheet(this.$refs.details) }
    },

    // =========================================================
    //                    Mobile bottom-sheet
    // =========================================================
    ensureSheet(){
      let root = document.getElementById('pcard-sheet')
      if (root) return root

      document.body.insertAdjacentHTML('beforeend', `
        <div id="pcard-sheet" class="pcard-sheet" aria-hidden="true">
          <div class="pcard-sheet__backdrop"></div>
          <div class="pcard-sheet__panel" role="dialog" aria-modal="true" aria-label="Product details">
            <button class="pcard-sheet__close" aria-label="Close">✕</button>
            <!-- very important: prevent Alpine from evaluating x-* inside -->
            <div class="pcard-sheet__body" x-ignore></div>
          </div>
        </div>
      `)

      root = document.getElementById('pcard-sheet')
      root.querySelector('.pcard-sheet__backdrop')
        .addEventListener('click', () => this.closeSheet())
      root.querySelector('.pcard-sheet__close')
        .addEventListener('click', () => this.closeSheet())
      document.addEventListener('keydown', (e) => { if (e.key === 'Escape') this.closeSheet() })
      return root
    },

    // remove Alpine directives from cloned content
    _sanitizeForSheet(node){
      const walk = (el) => {
        if (el.nodeType !== 1) return
        // drop all x-* attributes so Alpine doesn't try to evaluate qty/totalPrice inside sheet
        for (const attr of [...el.attributes]) {
          if (attr.name.startsWith('x-')) el.removeAttribute(attr.name)
        }
        // // optional: hide desktop-only "read" row if it exists
        // if (el.classList && el.classList.contains('pcd__read')) {
        //   el.style.display = 'none'
        // }
        el.childNodes.forEach(walk)
      }
      walk(node)
      return node
    },

    openSheet(detailsEl){
      const sheet = this.ensureSheet()
      const body = sheet.querySelector('.pcard-sheet__body')

      // clone product details and sanitize
      const clone = detailsEl.cloneNode(true)
      this._sanitizeForSheet(clone)

      // replace body content
      body.replaceChildren(...clone.childNodes)

      // open
      sheet.classList.add('is-open')
      sheet.removeAttribute('aria-hidden')
      document.documentElement.classList.add('no-scroll')

      // wire events and sync UI with current state
      this._wireSheetActions(sheet)
    },

    closeSheet(){
      const sheet = document.getElementById('pcard-sheet')
      if (!sheet) return
      sheet.classList.remove('is-open')
      sheet.setAttribute('aria-hidden', 'true')
      document.documentElement.classList.remove('no-scroll')
    },

    _sheetBound: false,
    _wireSheetActions(sheet){
      const body = sheet.querySelector('.pcard-sheet__body')

      const update = () => {
        const qtyEl = body.querySelector('.pcd__qty-val')
        const addSpan = body.querySelector('.pcd__add > span')
        if (qtyEl) qtyEl.textContent = this.qty              // show current qty immediately
        if (addSpan) addSpan.textContent = this.totalPrice + ' · ADD TO CART'
      }

      // bind clicks only once; we reuse the same sheet for all products
      if (!this._sheetBound){
        body.addEventListener('click', (ev) => {
          const btn = ev.target.closest('[data-action]')
          if(!btn) return
          const a = btn.dataset.action
          if(a==='inc'){ this.inc(); update() }
          if(a==='dec'){ this.dec(); update() }
          if(a==='add'){ ev.preventDefault(); this.addToCart(); update() }
          if(a==='wish'){ this.toggleWish() }
        }, { passive: false })
        this._sheetBound = true
      }

      // sync UI on open
      update()
    }
  }))
})
</script>

