<section
  id="MainProduct-{{ section.id }}"
  data-section="{{ section.id }}"
  x-ref="productCardRef"
  x-data="productCard('{{ section.id }}')"
  class="l-product pt-24 bg-color_2-tertiary">
  {% assign productColors = product.metafields.custom.color_palette.value %}
  {% assign productCurrent = product %}
  {% if section.settings.enable_color_palette %}
    {% render 'color-pallete', product: product %}
  {% endif %}
  <div class="container">
    <div class="l-product__main m-landing md:flex px-8 md:px-4 pb-8 md:pb-0 gap-16 ">
      <article class="l-product__gallery md:w-1/2 mb-12 md:mb-0">
        {% assign all_images = product.images | map: 'src' %}
        {% render 'image' with product.featured_image %}
        <div class="main-product__benefits">
          {% assign productBenefits = product.metafields.custom.benefits.value %}
          <ul class="main-product__benefits-list">
            {% for benefit in productBenefits %}
              <li class="main-product__benefits-item">
                  <figure class="main-product__benefits-icon">
                      <img src="{{ benefit.icon | img_url: '64x' }}" alt="{{ benefit.name }}" class="main-product__benefits-image" />
                  </figure>
                  <span class="main-product__benefits-text">{{ benefit.name }}</span>
              </li>
            {% endfor %}
          </ul>
        </div>
      </article>

      <article class="l-product__info md:w-1/2">
        <div class="b-product__info page-width-mobile">
          <product-info
            id="ProductInfo-{{ section.id }}"
            data-section="{{ section.id }}"
            data-url="{{ product.url }}"
            class="product__info-container text-black-content text-center">
            {% for block in section.blocks %}
              {% case block.type %}
                {% when 'title' %}
                  {% assign productSubtitle = product.metafields.custom.subtitle.value %}
                    <h1 class="text-3xl font-Gazpacho mb-2">{{ product.title | escape }}</h1>
                  {% when 'price' %}
                    <div class="text-baseBig mb-2 b-product__info-price">
                      <span
                        :class="{ 'line-through mr-2': discount > 0 && mode === 'subscribe' }"
                      >
                        {{ product.price | money }}
                      </span>
                      <span
                        x-show="discount > 0 && mode === 'subscribe'"
                        x-text="formatPrice(actualPrice)"></span>
                        {% comment %} <span
                          x-show="discount > 0 && mode === 'subscribe'"
                          x-text="actualPrice"></span> {% endcomment %}
                    </div>
                  {% when 'reviews' %}
                  {% assign rating = product.metafields.custom.rating %}
                  {% if rating != blank %}
                    <div class="flex mb-10">
                      <div class="flex">
                        {% for i in (1..5) %}
                          <svg
                            width="24"
                            height="24"
                            viewBox="0 0 24 24"
                            fill="{% if i <= rating %}#1D49CA{% else %}#b2e3ff{% endif %}"
                            xmlns="http://www.w3.org/2000/svg">
                            <path d="M21.9646 10.7672L17.7459 14.4075L19.0312 19.8516C19.1021 20.1471 19.0838 20.457 18.9787 20.7422C18.8736 21.0273 18.6863 21.2749 18.4405 21.4537C18.1947 21.6325 17.9015 21.7344 17.5978 21.7466C17.2941 21.7588 16.9936 21.6807 16.7343 21.5222L11.9999 18.6084L7.26275 21.5222C7.00347 21.6798 6.70335 21.7571 6.4002 21.7445C6.09704 21.7318 5.8044 21.6298 5.55913 21.4512C5.31386 21.2726 5.12692 21.0254 5.02185 20.7407C4.91679 20.4561 4.89829 20.1467 4.96869 19.8516L6.25869 14.4075L2.03994 10.7672C1.81053 10.5689 1.64462 10.3075 1.56293 10.0155C1.48123 9.72345 1.48737 9.41385 1.58058 9.12531C1.67379 8.83678 1.84994 8.5821 2.08703 8.39308C2.32412 8.20407 2.61164 8.08908 2.91369 8.0625L8.44494 7.61625L10.5787 2.4525C10.6942 2.17108 10.8908 1.93036 11.1434 1.76094C11.3961 1.59153 11.6934 1.50107 11.9976 1.50107C12.3018 1.50107 12.5991 1.59153 12.8518 1.76094C13.1044 1.93036 13.301 2.17108 13.4165 2.4525L15.5493 7.61625L21.0806 8.0625C21.3832 8.0881 21.6716 8.20244 21.9095 8.39119C22.1475 8.57995 22.3244 8.83473 22.4182 9.12361C22.512 9.4125 22.5185 9.72264 22.4368 10.0152C22.3551 10.3077 22.1889 10.5696 21.959 10.7681L21.9646 10.7672Z" />
                          </svg>
                        {% endfor %}
                      </div>
                      <div class="text-base ml-4 ">500 Reviews</div>
                    </div>
                  {% endif %}
                {% when 'description' %}
                  {% if product.description != blank %}
                    <div class="text-baseBig line b-product__desc">
                      {{ product.description }}
                    </div>
                  {% endif %}
                {% when '@app' %}
                  {% render block %}
                {% when 'buy_buttons' %}
                  {% comment %} {%- render 'buy-buttons',
                    block: block,
                    product: product,
                    product_form_id: product_form_id,
                    section_id: section.id,
                    show_pickup_availability: true,
                    sub_only: block.settings.rtx_sub_only
                  -%} {% endcomment %}
                  <form
                    method="post"
                    x-data="{ quantity: 1 }"
                  >
                    <article
                    class="hidden">
                      <div class="b-subscription">
                        <div
                            class="b-subscription__select flex flex-col gap-4"
                            :class="{ 'm-disabled': mode !== 'subscribe'}"
                        >
                          <template x-if="sellingPlansMap.length > 0">
                            <template
                              x-for="plan in sellingPlansMap"
                              x-model="selectedPlanId"
                              :key="plan.id"
                            >
                              <label
                                for="plan.id"
                                class="b-subscription__select-field !border-color_4 flex gap-3"
                                x-show="plan.id === selectedPlanId"

                              >
                                <input
                                  type="radio"
                                  id="plan.id"
                                  name="purchaseType"
                                  :value="plan.id"
                                  :checked="plan.id === selectedPlanId"
                                />
                                <div class="flex flex-col">
                                  <strong>Subscribe to the Trial Kit 0%</strong>
                                  <span class="font-normal">{{ product.price | money }}</span>
                                </div>
                              </label>
                            </template>
                          </template>
                            <template x-if="Object.keys(sellingPlansMap).length === 0">
                                <p>Loading subscription plans...</p>
                            </template>
                        </div>
                      </div>
                    </article>
                    <div class="flex gap-4 mb-8">
                      <input type="hidden" name="quantity" :value="quantity">
                      <div class="flex items-center border-2 border-black rounded-xl bg-white-bg h-full hidden">
                        <button
                          type="button"
                          class="w-12 text-center text-2xl"
                          @click="if (quantity > 1) quantity--"
                          aria-label="Decrease quantity"
                        >
                          -
                        </button>
                        <input
                          type="number"
                          class="text-center w-12 border-0 bg-transparent p-0 text-xl appearance-none outline-none"
                          x-model="quantity"
                          min="1"
                          data-min="{{ product.selected_or_first_available_variant.quantity_rule.min }}"
                          min="{{ product.selected_or_first_available_variant.quantity_rule.min }}"
                          {% if product.selected_or_first_available_variant.quantity_rule.max != null %}
                            data-max="{{ product.selected_or_first_available_variant.quantity_rule.max }}"
                            max="{{ product.selected_or_first_available_variant.quantity_rule.max }}"
                          {% endif %}
                        />
                        <button
                          type="button"
                          class="w-12 text-center text-2xl"
                          @click="quantity++"
                          aria-label="Increase quantity"
                        >
                          +
                        </button>
                      </div>
                      <button
                        type="button"
                        class="btn btn-primary m-auto"
                        data-first-variant="{{ product.first_available_variant.id }}"
                        @click.prevent="
                          addToCartPDP(quantity);
                        ">
                        Subscribe to the Trial Kit for {{ product.price | money }}
                      </button>
                    </div>
                  </form>
                {% when 'custom_liquid' %}
                  {% render block %}
              {% endcase %}
            {% endfor %}
          </product-info>
        </div>
      </article>
    </div>
  </div>
  <article class="l-product__details"></article>
  <article class="l-product__recommended"></article>
  {%- if product.metafields.custom.ingredients_nutrition_facts.value != blank
    or product.metafields.custom.variety_pack_products.value != blank
  -%}
    {% render 'product-ingredients-and-nutrition-new', product: product %}
  {% endif %}
</section>

<script>
  document.addEventListener('alpine:init', () => {
    Alpine.data('productCard', (sectionId) => ({
      sectionId,
      mainProduct: {{ productCurrent | json }} || {},
      mode: 'subscribe', // one-time | subscribe
      discount: 0,
      regularPrice: 0,
      discountedPrice: 0,
      actualPrice: 0,
      isLoading: false,
      sellingPlanGroups: undefined,
      sellingPlanId: null,
      sellingPlansMap: [],
      selectedPlanId: null,
      selectedPlan: {},
      selectedProduct: null,
      quantity: 1,

      init() {

        if (!this.mainProduct || !this.mainProduct.price) {
          console.error('mainProduct or its price is missing');
          return;
        }

        this.sellingPlanGroups = this.mainProduct.selling_plan_groups;

        if (this.sellingPlanGroups?.length > 0) {
          const firstGroup = this.sellingPlanGroups[0];
          if (firstGroup?.selling_plans?.length > 0) {
            this.sellingPlanId = firstGroup.app_id;
            this.sellingPlansMap = firstGroup.selling_plans;
            this.selectedPlanId = this.sellingPlansMap[0].id;
            this.selectedPlan = this.sellingPlansMap.find((plan) => plan.id === this.selectedPlanId);
            // this.discount = this.selectedPlan.price_adjustments[0].value;
          }
        }
        // console.log('Selling plan:', this.mainProduct);
        // console.log('Selling plan:', this.sellingPlanGroups[0]);
        // console.log('Selling plan:', this.sellingPlansMap);
        // console.log('Selling plan:', this.selectedPlan);

        this.updateActualPrice();
      },

      formatPrice(price) {
        const formattedPrice = price.toFixed(2);
        return `$${formattedPrice}`;
      },

      watchSelectedPlanId() {
        this.$watch('selectedPlan', (newValue) => {
          console.log('Selected plan changed:', newValue);
          this.updateActualPrice();
        });
      },

      updateActualPrice() {
        this.regularPrice = this.mainProduct.price / 100;

        if (this.mode === 'subscribe' && this.discount > 0) {
          this.discountedPrice = this.regularPrice - (this.regularPrice * this.discount / 100);
          this.actualPrice = this.discountedPrice;
          console.log('this.actualPrice:', this.actualPrice);
        } else {
          this.actualPrice = this.regularPrice;
        }
      },

      addToCartPDP(quantity) {
        const variantId = this.$el.getAttribute('data-first-variant');
        const product = {
          variantId,
          quantity,
          sellingPlanId: this.selectedPlanId,
          properties: {},
        };
        Alpine.store('cart').addToCart(product, false);
        this.quantity = 1;
        window.location.href = '/checkout';
      },

      loadProduct(productHandle) {
        const url = `/products/${productHandle}?sections=${this.sectionId}`;
        const productUrl = `/products/${productHandle}.js`

        fetch(url)
          .then((response) => {
            if (!response.ok) {
              throw new Error('Network response was not ok');
            }
            console.log('Product details:', response);
            return response.json();
          })
          .then((product) => {
            if (!product[this.sectionId]) {
              console.error('Product section not found');
              return;
            }
            const container = document.createElement('div');
            container.innerHTML = product[this.sectionId];
            const productDetails = container.querySelector('#MainProduct-' + this.sectionId);
            if (this.$refs.productCardRef) {
              this.$refs.productCardRef.replaceWith(productDetails);
            } else {
              console.error('Reference to productCardRef not found');
            }
            return fetch(productUrl);
          })
          .then((response) => {
            if (!response.ok) {
              throw new Error('Failed to fetch product data');
            }
            return response.json();
          })
          .then((productData) => {
            // this.mainProduct = productData;
            // this.init();
            // this.updateActualPrice();
            this.initNewProduct(productData);
            window.history.pushState({ urlPath: productHandle }, '', productHandle);
          })
          .catch((error) => {
            console.error('Error loading product:', error);
          });
      },
    }));

    Alpine.data('variantSelector', (defaultVariantId) => ({
      selectedVariants: [],
      defaultVariantId,

      updateSelectedVariants(event) {
        const form = this.$el;
        const selectedCheckbox = event.target;

        form.querySelectorAll('input[type="checkbox"]').forEach((checkbox) => {
          if (checkbox !== selectedCheckbox) {
            checkbox.checked = false;
          }
        });
        this.selectedVariants = selectedCheckbox.checked ? [selectedCheckbox.value] : [];
      },

      addToCart() {
        const variantId = this.selectedVariants.length > 0 ? this.selectedVariants[0] : this.defaultVariantId;

        Alpine.store('cart').addToCart(variantId);
      },
    }));
  });
</script>

{% schema %}
{
  "name": "Main Product Landing",
  "tag": "section",
  "class": "section",
  "blocks": [
    {
      "type": "@app"
    },
    {
      "type": "title",
      "name": "Title",
      "limit": 1
    },
    {
      "type": "price",
      "name": "Price Product",
      "limit": 1
    },
    {
      "type": "reviews",
      "name": "Review Product",
      "limit": 1
    },
    {
      "type": "description",
      "name": "Product Description",
      "limit": 1
    },
    {
      "type": "buy_buttons",
      "name": "Buy Buttons",
      "limit": 1
    },
    {
      "type": "custom_liquid",
      "name": "Custom Liquid",
      "settings": [
        {
          "type": "liquid",
          "id": "custom_liquid",
          "label": "Custom Liquid",
          "info": "Code"
        }
      ]
    }
  ],
  "settings": [
    {
      "type": "checkbox",
      "id": "enable_color_palette",
      "default": true,
      "label": "Enable Color Palette"
    }
  ],
  "presets": [
    {
      "name": "Main Product Landing",
    }
  ]
}
{% endschema %}
